# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class User(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, email=None, password=None, name=None, surname=None, account=None):
        """
        User - a model defined in Swagger

        :param id: The id of this User.
        :type id: int
        :param email: The email of this User.
        :type email: str
        :param password: The password of this User.
        :type password: str
        :param name: The name of this User.
        :type name: str
        :param surname: The surname of this User.
        :type surname: str
        :param account: The account of this User.
        :type account: str
        """
        self.swagger_types = {
            'id': int,
            'email': str,
            'password': str,
            'name': str,
            'surname': str,
            'account': str
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'password': 'password',
            'name': 'name',
            'surname': 'surname',
            'account': 'account'
        }

        self._id = id
        self._email = email
        self._password = password
        self._name = name
        self._surname = surname
        self._account = account

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.
        :rtype: User
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self):
        """
        Gets the id of this User.

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this User.

        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def email(self):
        """
        Gets the email of this User.

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this User.

        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def password(self):
        """
        Gets the password of this User.

        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this User.

        :param password: The password of this User.
        :type password: str
        """
        if password is not None and len(password) > 32:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `32`")
        if password is not None and len(password) < 8:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")

        self._password = password

    @property
    def name(self):
        """
        Gets the name of this User.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this User.

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def surname(self):
        """
        Gets the surname of this User.

        :return: The surname of this User.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """
        Sets the surname of this User.

        :param surname: The surname of this User.
        :type surname: str
        """

        self._surname = surname

    @property
    def account(self):
        """
        Gets the account of this User.

        :return: The account of this User.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this User.

        :param account: The account of this User.
        :type account: str
        """
        allowed_values = ["admin", "company", "employee"]
        if account not in allowed_values:
            raise ValueError(
                "Invalid value for `account` ({0}), must be one of {1}"
                .format(account, allowed_values)
            )

        self._account = account

