# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Company(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, tax_number=None):
        """
        Company - a model defined in Swagger

        :param id: The id of this Company.
        :type id: int
        :param name: The name of this Company.
        :type name: str
        :param tax_number: The tax_number of this Company.
        :type tax_number: int
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'tax_number': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'tax_number': 'tax_number'
        }

        self._id = id
        self._name = name
        self._tax_number = tax_number

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Company of this Company.
        :rtype: Company
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self):
        """
        Gets the id of this Company.

        :return: The id of this Company.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Company.

        :param id: The id of this Company.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Company.

        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Company.

        :param name: The name of this Company.
        :type name: str
        """
        if name is not None and len(name) > 32:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")

        self._name = name

    @property
    def tax_number(self):
        """
        Gets the tax_number of this Company.

        :return: The tax_number of this Company.
        :rtype: int
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """
        Sets the tax_number of this Company.

        :param tax_number: The tax_number of this Company.
        :type tax_number: int
        """

        self._tax_number = tax_number

